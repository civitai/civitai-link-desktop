name: Build/release Electron app

on:
  push:
    tags:
      - v*.*.*

jobs:
  release:
    runs-on: ${{ matrix.os }}

    env:
      APP_VERSION: 1.20.1

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.13.1'

      - name: Install Dependencies
        run: |
          npm --version && node --version
          npm install

      # - name: get-npm-version
      #   id: package-version
      #   uses: martinbeentjes/npm-get-version-action@v1.3.1

      - name: build-linux
        if: matrix.os == 'ubuntu-latest'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: npm run build:linux

      - name: build-mac
        if: matrix.os == 'macos-latest'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: npm run build:mac

      - name: build-win
        if: matrix.os == 'windows-latest'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: npm run build:win

      - name: Sign Artifact with CodeSignTool
        if: matrix.os == 'windows-latest'
        uses: sslcom/esigner-codesign@develop
        with:
          # Sign and timestamp code object.
          command: sign
          # SSL.com account username
          username: ${{ secrets.ES_USERNAME }}
          # SSL.com account password.
          password: ${{ secrets.ES_PASSWORD }}
          # Credential ID for signing certificate.
          credential_id: ${{ secrets.CREDENTIAL_ID }}
          # OAuth TOTP Secret (https://www.ssl.com/how-to/automate-esigner-ev-code-signing)
          totp_secret: ${{ secrets.ES_TOTP_SECRET }}
          # Path of code object to be signed. (DLL, JAR, EXE, MSI files vb... )
          # ${name}-${version}-setup.${ext}
          file_path: ${{ github.workspace }}/dist/civitai-link-${{ env.APP_VERSION }}-setup.exe
          # Directory where signed code object(s) will be written.
          # output_path: ${{ github.workspace }}/artifacts
          # Scan code before sign
          malware_block: false
          # Overwrite the existing file
          override: true
          # Environment Name, For Production 'PROD' or For Staging 'TEST'
          environment_name: PROD
          # JVM Max Memory
          jvm_max_memory: 2048M

      - name: Rehash
        if: matrix.os == 'windows-latest'
        env:
          TARGET_PATH: ${{ github.workspace }}/dist/civitai-link-${{ env.APP_VERSION }}-setup.exe
          LATEST_YAML_PATH: ${{ github.workspace }}/dist/latest.yml
        run: npm run recompute-hash
